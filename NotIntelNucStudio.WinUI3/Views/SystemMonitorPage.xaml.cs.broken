using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Navigation;
using NotIntelNucStudio.WinUI3.Services;
using System;
using System.Management;
using System.Threading.Tasks;
using System.Linq;
using LibreHardwareMonitor.Hardware;

namespace NotIntelNucStudio.WinUI3.Views
{
    public sealed partial class SystemMonitorPage : Page
    {
        private DispatcherTimer _updateTimer;
        private LibreHardwareService? _hardwareService;

        public SystemMonitorPage()
        {
            Console.WriteLine("=== SystemMonitorPage constructor called ===");
            this.InitializeComponent();
            
            // Initialize hardware monitoring service
            InitializeHardwareService();
            
            // Load static system information
            LoadSystemInformation();
            
            // Load EC information
            UpdateEmbeddedControllerInfo();
            
            // Set up update timer for real-time hardware monitoring
            _updateTimer = new DispatcherTimer();
            _updateTimer.Interval = TimeSpan.FromSeconds(2);
            _updateTimer.Tick += UpdateTimer_Tick;
            _updateTimer.Start();
            Console.WriteLine("=== Hardware monitoring timer started ===");
        }

        private async void InitializeHardwareService()
        {
            try
            {
                _hardwareService = new LibreHardwareService();
                
                // Initialize the hardware service
                bool success = await _hardwareService.InitializeAsync();
                if (success)
                {
                    Console.WriteLine("=== LibreHardwareService initialized successfully ===");
                    
                    // Subscribe to status updates
                    _hardwareService.StatusChanged += (sender, status) =>
                    {
                        Console.WriteLine($"Hardware service status: {status}");
                    };
                }
                else
                {
                    Console.WriteLine("WARNING: Failed to initialize LibreHardwareService");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR initializing LibreHardwareService: {ex.Message}");
                _hardwareService = null;
            }
        }

        private async void LoadSystemInformation()
        {
            try
            {
                Console.WriteLine("=== Loading system information ===");
                
                // Get Computer System Information
                using var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem");
                foreach (ManagementObject obj in searcher.Get())
                {
                    if (FindName("SystemModelText") is TextBlock modelText)
                    {
                        string model = obj["Model"]?.ToString() ?? "Unknown";
                        modelText.Text = $"System Model: {model}";
                        Console.WriteLine($"System Model: {model}");
                    }
                    
                    if (FindName("SystemManufacturerText") is TextBlock manufacturerText)
                    {
                        string manufacturer = obj["Manufacturer"]?.ToString() ?? "Unknown";
                        manufacturerText.Text = $"System Manufacturer: {manufacturer}";
                        Console.WriteLine($"System Manufacturer: {manufacturer}");
                    }
                }

                // Get BIOS Information
                using var biosSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BIOS");
                foreach (ManagementObject obj in biosSearcher.Get())
                {
                    if (FindName("BiosVersionText") is TextBlock biosText)
                    {
                        string biosVersion = obj["SMBIOSBIOSVersion"]?.ToString() ?? "Unknown";
                        string biosDate = obj["ReleaseDate"]?.ToString() ?? "";
                        if (!string.IsNullOrEmpty(biosDate) && biosDate.Length >= 8)
                        {
                            // Convert WMI date format (YYYYMMDDHHMMSS) to readable format
                            biosDate = $"{biosDate.Substring(6, 2)}/{biosDate.Substring(4, 2)}/{biosDate.Substring(0, 4)}";
                        }
                        string displayText = string.IsNullOrEmpty(biosDate) ? 
                            $"BIOS Version: {biosVersion}" : 
                            $"BIOS Version: {biosVersion} ({biosDate})";
                        biosText.Text = displayText;
                        Console.WriteLine($"BIOS: {displayText}");
                    }
                }

                // Get BaseBoard Information
                using var boardSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_BaseBoard");
                foreach (ManagementObject obj in boardSearcher.Get())
                {
                    if (FindName("BaseBoardVersionText") is TextBlock boardText)
                    {
                        string boardVersion = obj["Version"]?.ToString() ?? "Unknown";
                        string boardProduct = obj["Product"]?.ToString() ?? "";
                        string displayText = string.IsNullOrEmpty(boardProduct) ? 
                            $"BaseBoard Version: {boardVersion}" : 
                            $"BaseBoard: {boardProduct} v{boardVersion}";
                        boardText.Text = displayText;
                        Console.WriteLine($"BaseBoard: {displayText}");
                    }
                }

                // Get Computer System Product (for SKU)
                using var productSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystemProduct");
                foreach (ManagementObject obj in productSearcher.Get())
                {
                    if (FindName("SystemSkuText") is TextBlock skuText)
                    {
                        string sku = obj["IdentifyingNumber"]?.ToString() ?? "Unknown";
                        skuText.Text = $"System SKU: {sku}";
                        Console.WriteLine($"System SKU: {sku}");
                    }
                    
                    if (FindName("SystemVersionText") is TextBlock versionText)
                    {
                        string version = obj["Version"]?.ToString() ?? "Unknown";
                        versionText.Text = $"System Version: {version}";
                        Console.WriteLine($"System Version: {version}");
                    }
                }

                Console.WriteLine("=== System information loaded successfully ===");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR loading system information: {ex.Message}");
                // Fallback to generic values if WMI fails
                if (FindName("SystemModelText") is TextBlock modelText)
                    modelText.Text = "System Model: Detection Failed";
            }
        }

        private void UpdateEmbeddedControllerInfo()
        {
            try
            {
                // Try to get EC version from various sources
                if (FindName("EmbeddedControllerText") is TextBlock ecText)
                {
                    // For Intel NUCs, try to get EC info (this is hardware specific)
                    // For now, we'll show a dynamic version or fallback
                    var ecVersion = GetEmbeddedControllerVersion();
                    ecText.Text = $"Embedded Controller Version: {ecVersion}";
                    Console.WriteLine($"EC Version: {ecVersion}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR getting EC info: {ex.Message}");
            }
        }

        private string GetEmbeddedControllerVersion()
        {
            try
            {
                // Try to get EC version from PnP devices
                using var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_PnPEntity WHERE Name LIKE '%Embedded Controller%'");
                foreach (ManagementObject obj in searcher.Get())
                {
                    string? version = obj["HardwareID"]?.ToString();
                    if (!string.IsNullOrEmpty(version))
                    {
                        return version.Split('\\').LastOrDefault() ?? "Unknown";
                    }
                }
                
                // Fallback: try ACPI
                using var acpiSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_SystemDriver WHERE Name = 'ACPI'");
                foreach (ManagementObject obj in acpiSearcher.Get())
                {
                    return obj["Version"]?.ToString() ?? "Detected";
                }
                
                return "Detected";
            }
            catch
            {
                return "Unknown";
            }
        }

        private async void UpdateTimer_Tick(object? sender, object e)
        {
            if (_hardwareService == null)
            {
                Console.WriteLine("Hardware service not available, skipping update");
                return;
            }

            try
            {
                Console.WriteLine($"=== HARDWARE UPDATE at {DateTime.Now:HH:mm:ss} ===");
                
                // Update hardware readings
                await _hardwareService.RefreshAsync();
                var sensors = await _hardwareService.GetAllSensorsAsync();

                // Update CPU information
                UpdateCpuInfo(sensors);
                
                // Update GPU information  
                UpdateGpuInfo(sensors);
                
                // Update Memory information
                UpdateMemoryInfo(sensors);
                
                // Update Storage information
                UpdateStorageInfo(sensors);
                
                // Update Fan information
                UpdateFanInfo(sensors);
                
                // Update Motherboard temperature
                UpdateMotherboardInfo(sensors);

                Console.WriteLine("=== Hardware update completed ===");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR during hardware update: {ex.Message}");
            }
        }

        private void UpdateCpuInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                var cpuSensors = sensors.Where(s => s.HardwareType == HardwareType.Cpu).ToList();
                
                // CPU Usage
                var cpuLoad = cpuSensors.FirstOrDefault(s => s.Type == SensorType.Load && s.Name.Contains("CPU Total"));
                if (cpuLoad != null && FindName("CpuUsageText") is TextBlock cpuText)
                {
                    cpuText.Text = $"{cpuLoad.Value:F0}%";
                }
                
                // CPU Temperature
                var cpuTemp = cpuSensors.FirstOrDefault(s => s.Type == SensorType.Temperature && s.Name.Contains("Core") && s.Name.Contains("Max"));
                if (cpuTemp != null && FindName("CpuTempText") is TextBlock tempText)
                {
                    tempText.Text = $"{cpuTemp.Value:F0}°C";
                }
                
                // CPU Name
                if (cpuSensors.Any() && FindName("CpuNameText") is TextBlock nameText)
                {
                    nameText.Text = $"Name: {cpuSensors.First().HardwareName}";
                }
                
                // CPU Clock Speed
                var cpuClock = cpuSensors.FirstOrDefault(s => s.Type == SensorType.Clock && s.Name.Contains("CPU Core"));
                if (cpuClock != null && FindName("CpuClockText") is TextBlock clockText)
                {
                    clockText.Text = $"Current Clock Speed: {cpuClock.Value:F2} MHz";
                }

                Console.WriteLine($"CPU: {cpuLoad?.Value:F0}% usage, {cpuTemp?.Value:F0}°C");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating CPU info: {ex.Message}");
            }
        }

        private void UpdateGpuInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                // iGPU (Intel integrated)
                var iGpuSensors = sensors.Where(s => s.HardwareType == HardwareType.GpuIntel).ToList();
                if (iGpuSensors.Any())
                {
                    var iGpuLoad = iGpuSensors.FirstOrDefault(s => s.Type == SensorType.Load && s.Name.Contains("GPU Core"));
                    if (iGpuLoad != null && FindName("GpuUsageText") is TextBlock iGpuText)
                    {
                        iGpuText.Text = $"{iGpuLoad.Value:F0}%";
                    }
                    
                    var iGpuTemp = iGpuSensors.FirstOrDefault(s => s.Type == SensorType.Temperature);
                    if (iGpuTemp != null && FindName("GpuTempText") is TextBlock iGpuTempText)
                    {
                        iGpuTempText.Text = $"{iGpuTemp.Value:F0}°C";
                    }
                    
                    if (FindName("GpuNameText") is TextBlock iGpuNameText)
                    {
                        iGpuNameText.Text = $"Name: {iGpuSensors.First().HardwareName}";
                    }
                    
                    Console.WriteLine($"iGPU: {iGpuLoad?.Value:F0}% usage");
                }
                
                // dGPU (NVIDIA/AMD discrete)
                var dGpuSensors = sensors.Where(s => s.HardwareType == HardwareType.GpuNvidia || s.HardwareType == HardwareType.GpuAmd).ToList();
                if (dGpuSensors.Any())
                {
                    var dGpuLoad = dGpuSensors.FirstOrDefault(s => s.Type == SensorType.Load && s.Name.Contains("GPU Core"));
                    if (dGpuLoad != null && FindName("dGpuUsageText") is TextBlock dGpuText)
                    {
                        dGpuText.Text = $"{dGpuLoad.Value:F0}%";
                    }
                    
                    var dGpuTemp = dGpuSensors.FirstOrDefault(s => s.Type == SensorType.Temperature && s.Name.Contains("GPU Core"));
                    if (dGpuTemp != null && FindName("dGpuTempText") is TextBlock dGpuTempText)
                    {
                        dGpuTempText.Text = $"{dGpuTemp.Value:F0}°C";
                    }
                    
                    if (FindName("dGpuNameText") is TextBlock dGpuNameText)
                    {
                        dGpuNameText.Text = $"Name: {dGpuSensors.First().HardwareName}";
                    }
                    
                    // GPU Clock speeds
                    var gpuCoreClock = dGpuSensors.FirstOrDefault(s => s.Type == SensorType.Clock && s.Name.Contains("GPU Core"));
                    if (gpuCoreClock != null && FindName("dGpuCoreClockText") is TextBlock coreClockText)
                    {
                        coreClockText.Text = $"Core Clock Speed: {gpuCoreClock.Value:F0} MHz";
                    }
                    
                    var gpuMemoryClock = dGpuSensors.FirstOrDefault(s => s.Type == SensorType.Clock && s.Name.Contains("GPU Memory"));
                    if (gpuMemoryClock != null && FindName("dGpuMemoryClockText") is TextBlock memoryClockText)
                    {
                        memoryClockText.Text = $"Memory Clock Speed: {gpuMemoryClock.Value:F0} MHz";
                    }
                    
                    // GPU Memory
                    var gpuMemory = dGpuSensors.FirstOrDefault(s => s.Type == SensorType.SmallData && s.Name.Contains("GPU Memory Total"));
                    if (gpuMemory != null && FindName("dGpuMemoryText") is TextBlock memoryText)
                    {
                        memoryText.Text = $"Memory: {gpuMemory.Value:F0} GB";
                    }

                    Console.WriteLine($"dGPU: {dGpuLoad?.Value:F0}% usage, {dGpuTemp?.Value:F0}°C");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating GPU info: {ex.Message}");
            }
        }

        private void UpdateMemoryInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                var memorySensors = sensors.Where(s => s.HardwareType == HardwareType.Memory).ToList();
                
                var memoryUsed = memorySensors.FirstOrDefault(s => s.Type == SensorType.Data && s.Name.Contains("Memory Used"));
                var memoryTotal = memorySensors.FirstOrDefault(s => s.Type == SensorType.Data && s.Name.Contains("Memory"));
                var memoryLoad = memorySensors.FirstOrDefault(s => s.Type == SensorType.Load && s.Name.Contains("Memory"));
                
                if (memoryLoad != null && FindName("MemoryUsageText") is TextBlock memText)
                {
                    memText.Text = $"{memoryLoad.Value:F0}%";
                }
                
                if (memoryUsed != null && FindName("MemoryAvailableText") is TextBlock availableText)
                {
                    var available = memoryTotal != null ? memoryTotal.Value - memoryUsed.Value : 0;
                    availableText.Text = $"Available Memory: {available:F2} GB";
                }
                
                if (memoryTotal != null && FindName("MemoryTotalText") is TextBlock totalText)
                {
                    totalText.Text = $"Total Memory: {memoryTotal.Value:F2} GB";
                }

                Console.WriteLine($"Memory: {memoryLoad?.Value:F0}% usage");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating memory info: {ex.Message}");
            }
        }

        private void UpdateStorageInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                var storageSensors = sensors.Where(s => s.HardwareType == HardwareType.Storage).ToList();
                
                // Get unique storage devices
                var storageDevices = storageSensors.Select(s => s.HardwareName).Distinct().Take(3).ToList();
                
                for (int i = 0; i < storageDevices.Count && i < 3; i++)
                {
                    var deviceName = storageDevices[i];
                    var deviceSensors = storageSensors.Where(s => s.HardwareName == deviceName).ToList();
                    
                    // Update storage temperature
                    var storageTemp = deviceSensors.FirstOrDefault(s => s.Type == SensorType.Temperature);
                    
                    // Update storage usage (this would need to be calculated from available WMI data)
                    // For now, we'll keep using the WMI-based storage info for space usage
                    
                    string prefix = i == 0 ? "" : (i == 1 ? "2" : "3");
                    
                    if (FindName($"Storage{(i == 0 ? "" : (i + 1).ToString())}TypeText") is TextBlock typeText)
                    {
                        typeText.Text = $"Interface Type: {(deviceName.Contains("NVMe") ? "SSD-NVMe" : "SSD")}";
                    }

                    Console.WriteLine($"Storage {i + 1}: {deviceName}, Temp: {storageTemp?.Value:F0}°C");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating storage info: {ex.Message}");
            }
        }

        private void UpdateFanInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                var fanSensors = sensors.Where(s => s.Type == SensorType.Fan).ToList();
                
                var cpuFan = fanSensors.FirstOrDefault(s => s.Name.Contains("CPU") || s.Name.Contains("Fan #1"));
                if (cpuFan != null && FindName("CpuFanRpmText") is TextBlock cpuFanText)
                {
                    cpuFanText.Text = $"CPU Fan: {cpuFan.Value:F0} RPM";
                }
                
                var systemFan1 = fanSensors.Skip(1).FirstOrDefault();
                if (systemFan1 != null && FindName("SystemFan1RpmText") is TextBlock systemFan1Text)
                {
                    systemFan1Text.Text = $"System Fan 1: {systemFan1.Value:F0} RPM";
                }
                
                var systemFan2 = fanSensors.Skip(2).FirstOrDefault();
                if (systemFan2 != null && FindName("SystemFan2RpmText") is TextBlock systemFan2Text)
                {
                    systemFan2Text.Text = $"System Fan 2: {systemFan2.Value:F0} RPM";
                }

                Console.WriteLine($"Fans: CPU {cpuFan?.Value:F0} RPM, System1 {systemFan1?.Value:F0} RPM");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating fan info: {ex.Message}");
            }
        }

        private void UpdateMotherboardInfo(IEnumerable<LibreHardwareService.HardwareSensor> sensors)
        {
            try
            {
                var motherboardSensors = sensors.Where(s => s.HardwareType == HardwareType.Motherboard).ToList();
                
                var motherboardTemp = motherboardSensors.FirstOrDefault(s => s.Type == SensorType.Temperature && s.Name.Contains("System"));
                if (motherboardTemp != null && FindName("MotherboardTempText") is TextBlock motherboardTempText)
                {
                    motherboardTempText.Text = $"Motherboard Temp: {motherboardTemp.Value:F0}°C";
                }

                Console.WriteLine($"Motherboard: {motherboardTemp?.Value:F0}°C");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"ERROR updating motherboard info: {ex.Message}");
            }
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            Console.WriteLine("Back button clicked");
            // Stop the timer when navigating back
            _updateTimer?.Stop();
            
            // Navigate back to MainPage
            if (Frame.CanGoBack)
            {
                Frame.GoBack();
            }
        }

        protected override void OnNavigatedFrom(NavigationEventArgs e)
        {
            // Clean up when navigating away
            _updateTimer?.Stop();
            _hardwareService?.Dispose();
            base.OnNavigatedFrom(e);
        }
    }
}
